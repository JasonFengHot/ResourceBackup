1.Factory Method工厂方法 ???
public abstract class Product{
    public void template_method(){
        System.out.println(hook_method());
    }
    protected abstract String hook_method();
}

public abstract class Client{
    protected Product obj = null;                //这里组合了一个Product对象
    public void anOperation(){
        factoryMethod();
        obj.template_method();                    //调用Product的方法
    }
    protected abstract void factoryMethod();
}

public class IntegerNumber extends Product{
    private int value;
    IntegerNumber(int v){
        value = v;
    }
    protected String hook_method(){
        return String.valueOf(value);
    }
}

public class ConcreteClient extends Client{
    protected void factoryMethod(){
        obj = new IntegerNumber(1250);            //在这里初始化Product对象
    }
}

public class Main{
    public static void main(String[] args){
        Client sc = new ConcreteClient();
        sc.anOperation();
    }
}

2.
public abstract class Number{
    public abstract String hook_method(int y);
}

public class Integer extends Number{
    private int x;
    public Integer(int i){
        this.x = i;
    }
    public String hook_method(int y){
        return String.valueOf(x * y);
    }
}

public class Double extends Number{
    private double x;
    public Double(double a){
        this.x = a;
    }
    public String hook_method(int y){
        return String.valueOf(x + y);
    }
}
public class Main{
    public static void main(String[] args){
        Main main = new Main();
        main.print(new Double(3.6f));
        main.print(new Integer(2));
    }
    private void print(Number number,int b){
        System.out.println(number.hook_method(b));
    }
}

    3.Observer模式？？？

    解决：
    public class Invarient{                                        //相当于View
        private Observer observer;
        public void template_method(){                            //相当于点击了一下按钮
            observer.hook_varient();
        }
        protected void attach(Observer observer){                //相当于setOnClickListener(OnClickListener onClickListener)方法
            this.observer = observer;
        }
    }
    public abstract class Observer{                                //相当于OnClickListener
        public abstract void hook_varient();                    //相当于onClick(View v)方法
    }
    public class ConcreteObserver_Varient extends Observer{        //相当于OnClickListener的实现类
        public void hook_varient(){
            System.out.println("hook_varient...");
        }
    }
    public class Main{
        public static void main(String[] args){
            Invarient iv = new Invarient();                        
            iv.attach(new ConcreteObserver_Varient());            
            iv.template_method();
        }
    }

    4.两个Activity之间通过接口进行通信？？？

    解决：
    public class MainActivity extends Activity{
        public void onCreate(Bundle savedInstanceState){
            startActivity(new Intent(MainActivity.this,SecondActivity.class));
            SecondActivity.setListener(new IListener(){
                public void updateTitle(String title){
                    setTitle(title);
                }
            });
        }
        public interface IListener{
            public void updateTitle(String title);
        }
    }

    public class SecondActivity extends Activity{
        public void onCreate(Bundle savedInstanceState){
            findViewById(R.id.btn_update).setOnClickListener(new OnClickListener(){
                public void onClick(View v){
                    listener.updateTitle("hello");        //这里调用接口中的方法
                }
            });
        }
        private static IListener listener;
        public static void setListener(IListener listener){
            this.listener = listener;
        }
    }

    5.Activity和Service之间通过接口进行通信？？

    解决：
    public class MainActivity extends Activity{
        public void onCreate(Bundle savedInstanceState){
            startService(new Intent(MainActivity.this,MainService.class));
            MainService.setListener(new IListener(){
                public void updateTitle(String title){
                    setTitle(title);
                }
            });
        }
        public interface IListener{
            public void updateTitle();
        }
    }

    public class MainService extends Service{
        public void onCreate(){
            super.onCreate();
            if(listener!=null){
                listener.updateTitle("hello");
            }
        }
        public IBinder onBind(Intent intent){
            return null;
        }
        private static IListener listener;
        public static void setListener(IListener listener){
            this.listener = listener;
        }
    }

6.将.mp3文件保存到SQLite数据库中？？？

解决：
ContentValues contentValues = new ContentValues();
InputStream is = getResources().openRawResource(rid);
int bufSize = 63 * 1024;
byte[] buffer = new byte[bufSize];
try{
    int size = is.read(buffer);
    while(size > = 0){
        ByteArrayOutputStream out = new ByteArrayOutputStream(size);
        out.write(buffer,0,size);
        out.flush();
        out.close();
        contentValues.put("song_mp3",out.toByteArray());
        db.insert(mySong,null,contentValues);
        size = is.read(buffer);
    }
}catch(Exception e){
    e.printStackTrace();
}
